// package main

// import (
// 	"database/sql"
// 	"errors"
// 	"fmt"
// 	"log"
// 	"net/http"
// 	"os"
// 	"strings"

// 	"github.com/gin-gonic/gin"
// 	"github.com/ibilalkayy/crud-api/entities"
// 	"github.com/joho/godotenv"
// 	_ "github.com/lib/pq"
// )

// var db *sql.DB

// func main() {
// 	// Load environment variables
// 	err := loadEnv()
// 	if err != nil {
// 		log.Fatal("Error loading .env file: ", err)
// 	}

// 	// Connect to the database
// 	err = connectDB()
// 	if err != nil {
// 		log.Fatal("Error connecting to the database: ", err)
// 	}
// 	defer db.Close()

// 	// Initialize Gin router
// 	r := gin.Default()

// 	// Routes
// 	r.GET("/create_table", createTableHandler)
// 	r.GET("/insert_tasks", func(c *gin.Context) {
// 		// Sample task to be inserted
// 		ct := &entities.TaskVariables{
// 			Title:     "Sample Task",
// 			Body:      "Sample Task Body",
// 			Status:    "Pending",
// 			CreatedAt: 43,
// 			UpdatedAt: 5423,
// 		}

// 		// Insert task into the database
// 		err := CreateTask(db, ct)
// 		if err != nil {
// 			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
// 			return
// 		}

// 		c.JSON(http.StatusOK, gin.H{"message": "Task created successfully"})
// 	})

// 	// Run the Gin server
// 	if err := r.Run(":8080"); err != nil {
// 		log.Fatal("Failed to run server: ", err)
// 	}
// }

// // loadEnv loads environment variables from a .env file
// func loadEnv() error {
// 	err := godotenv.Load(".env")
// 	if err != nil {
// 		return err
// 	}
// 	return nil
// }

// // connectDB connects to the PostgreSQL database
// func connectDB() error {
// 	url := os.Getenv("DB_URL")
// 	if len(url) == 0 {
// 		return errors.New("DB_URL environment is not set")
// 	}
// 	var err error
// 	db, err = sql.Open("postgres", url)
// 	if err != nil {
// 		return err
// 	}

// 	// Ping the database to verify the connection
// 	err = db.Ping()
// 	if err != nil {
// 		return err
// 	}

// 	fmt.Println("Successfully connected to the database!")
// 	return nil
// }

// // createTableHandler creates a table in the database
// func createTableHandler(c *gin.Context) {
// 	// Execute the SQL statement to create a table
// 	_, err := Table(db, "framework/db/migrations/db.SQL", 0)
// 	if err != nil {
// 		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
// 		return
// 	}

// 	c.JSON(http.StatusOK, gin.H{"message": "Table created successfully"})
// }

// // TaskVariables struct
// type TaskVariables struct {
// 	Title     string `json:"title"`
// 	Body      string `json:"body"`
// 	Status    string `json:"statuss"`
// 	CreatedAt string `json:"created_at"`
// 	UpdatedAt string `json:"updated_at"`
// }

// // CreateTask function
// func CreateTask(db *sql.DB, ct *entities.TaskVariables) error {
// 	query := "INSERT INTO Task(title, body, statuss, created_at, updated_at) VALUES($1, $2, $3, $4, $5)"
// 	insert, err := db.Prepare(query)
// 	if err != nil {
// 		return err
// 	}
// 	defer insert.Close()

// 	if len(ct.Title) != 0 {
// 		_, err = insert.Exec(ct.Title, ct.Body, ct.Status, ct.CreatedAt, ct.UpdatedAt)
// 		if err != nil {
// 			return err
// 		}
// 		fmt.Println("Task data is successfully inserted!")
// 		return nil
// 	}
// 	return errors.New("enter the task")
// }

// // Table function
// func Table(db *sql.DB, filename string, number int) (*sql.DB, error) {
// 	query, err := os.ReadFile(filename)
// 	if err != nil {
// 		return nil, err
// 	}

// 	requests := strings.Split(string(query), ";")[number]
// 	stmt, err := db.Prepare(requests)
// 	if err != nil {
// 		return nil, err
// 	}

// 	_, err = stmt.Exec()
// 	if err != nil {
// 		return nil, err
// 	}
// 	return db, nil
// }
